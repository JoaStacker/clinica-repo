// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Clinica.Tests.BDD.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class IniciarSesionFeature : object, Xunit.IClassFixture<IniciarSesionFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Iniciar sesion", "  Para que se pueda acceder a las funcionalidades del sistema de cl�nica\r\n  el me" +
                "dico\r\n  quiere iniciar sesion con sus credenciales", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Login.feature"
#line hidden
        
        public IniciarSesionFeature(IniciarSesionFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 7
#line hidden
            global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                        "email",
                        "clave"});
            table1.AddRow(new string[] {
                        "pedro@gmail.com",
                        "C0ding4Life$"});
#line 8
  await testRunner.GivenAsync("que existen los siguientes usuarios medicos:", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="El medico inicia sesion con claves invalidas")]
        [Xunit.TraitAttribute("FeatureTitle", "Iniciar sesion")]
        [Xunit.TraitAttribute("Description", "El medico inicia sesion con claves invalidas")]
        [Xunit.InlineDataAttribute("pedro@gmail.com", "Program4Life$", new string[0])]
        [Xunit.InlineDataAttribute("pedro@gmail.com", "Engineer4Life$", new string[0])]
        [Xunit.InlineDataAttribute("pedro@gmail.com", "Desgin4Life$", new string[0])]
        public async System.Threading.Tasks.Task ElMedicoIniciaSesionConClavesInvalidas(string email, string clave, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("clave", clave);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("El medico inicia sesion con claves invalidas", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 16
  await testRunner.WhenAsync(string.Format("el medico ingresa el email \"{0}\" y la clave \"{1}\" e inicia sesion", email, clave), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 17
  await testRunner.ThenAsync("no se debe crear una nueva sesion y mostrar un mensaje \"Clave incorrecta\".", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="El medico inicia sesion con emails invalidos")]
        [Xunit.TraitAttribute("FeatureTitle", "Iniciar sesion")]
        [Xunit.TraitAttribute("Description", "El medico inicia sesion con emails invalidos")]
        [Xunit.InlineDataAttribute("santiago@gmail.com", "C0ding4Life$", new string[0])]
        [Xunit.InlineDataAttribute("pepe@gmail.com", "C0ding4Life$", new string[0])]
        [Xunit.InlineDataAttribute("barbara@gmail.com", "C0ding4Life$", new string[0])]
        public async System.Threading.Tasks.Task ElMedicoIniciaSesionConEmailsInvalidos(string email, string clave, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("clave", clave);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("El medico inicia sesion con emails invalidos", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 26
  await testRunner.WhenAsync(string.Format("el medico ingresa el email \"{0}\" y la clave \"{1}\" e inicia sesion", email, clave), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
  await testRunner.ThenAsync("no se debe crear una nueva sesion y mostrar un mensaje \"Email incorrecto\".", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="El medico ingresa un email y clave validos")]
        [Xunit.TraitAttribute("FeatureTitle", "Iniciar sesion")]
        [Xunit.TraitAttribute("Description", "El medico ingresa un email y clave validos")]
        public async System.Threading.Tasks.Task ElMedicoIngresaUnEmailYClaveValidos()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("El medico ingresa un email y clave validos", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 36
  await testRunner.WhenAsync("el medico ingresa el email \"pedro@gmail.com\" y la clave \"C0ding4Life$\" e inicia s" +
                        "esion", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 37
  await testRunner.ThenAsync("se debe crear una sesion para el usuario con dicho email y generar un token.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await IniciarSesionFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await IniciarSesionFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
